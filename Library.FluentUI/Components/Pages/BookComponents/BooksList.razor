@page "/books"
@rendermode InteractiveServer
@inject IDialogService DialogService

@using Library.Domain.Entities
@using Library.ServicesInterfaces

<h3>Books</h3>

<div style="float:inline-end">
    <FluentButton Appearance="Appearance.Accent" @onclick="ShowAddModal">Add New Book</FluentButton>
</div>

<br />

@if (books == null)
{
    <span>Loading...</span>
}
else
{

    <FluentDataGrid Items="@books" GenerateHeader="GenerateHeaderOption.Sticky" ResizableColumns=true Pagination="@pagination" Style="width: 100%; height: 405px;overflow:auto;">
        <PropertyColumn Property="@(p=>p.Title)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.ISBN)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.NumberOfPages)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Language)" Sortable="true" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenDialogAsync(context))" />
            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteBook(context))" />
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />


}

@code {
    [Inject] IBookService BookService { get; set; }
    private IQueryable<Book> books;
    private AddEditBookDialog addEditBookDialog ;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        books = (await BookService.GetAll()).AsQueryable();
        StateHasChanged();
    }

    private async Task OpenDialogAsync(Book book)
    {
        DialogParameters parameters = new DialogParameters()
            {
                Title = ((book.Id == 0) ? "Add Book" : "Edit Book"),
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "2000px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        var dialog = await DialogService.ShowDialogAsync<AddEditBookDialog>(book, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            await LoadBooks();
        }

    }
    private async Task ShowAddModal()
    {
        await OpenDialogAsync(new Book());
    }

    private async void DeleteBook(Book book)
    {
        await BookService.Delete(book);
        await LoadBooks();
    }

    private async void RefreshList()
    {
        await LoadBooks();
    }
}
